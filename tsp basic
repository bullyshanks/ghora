# Simple TSP with Nearest Neighbor Algorithm
# Delivery points: 0 = Dispatch, 1-4 = Locations

# Step 1: Distance Matrix
# This matrix represents distances between each pair of locations
distance = [
    [0, 3, 5, 6, 7],
    [3, 0, 4, 5, 6],
    [5, 4, 0, 2, 3],
    [6, 5, 2, 0, 4],
    [7, 6, 3, 4, 0]
]

# Step 2: Nearest Neighbor TSP
def tsp_nearest_neighbor():
    n = len(distance)
    visited = [False] * n
    path = []
    total_distance = 0

    current = 0  # Start from dispatch center
    visited[current] = True
    path.append(current)

    for _ in range(n - 1):
        nearest = -1
        min_dist = float('inf')
        for j in range(n):
            if not visited[j] and distance[current][j] < min_dist:
                min_dist = distance[current][j]
                nearest = j
        visited[nearest] = True
        path.append(nearest)
        total_distance += min_dist
        current = nearest

    # Return to dispatch
    total_distance += distance[current][0]
    path.append(0)

    return path, total_distance

# Step 3: Run the function and show result
path, total = tsp_nearest_neighbor()

print("Optimal Path (Nearest Neighbor):")
print(" â†’ ".join(str(p) for p in path))
print("Total Distance:", total)
